package solve;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class day5 {
    public static void main(String[] args) throws IOException {
        String content = new String(Files.readAllBytes(Paths.get("src\\input.txt"))).trim();
        String[] lines = content.split("\n");

        String[] parts = content.split("\n\n");
        String seedString = parts[0];
        String[] others = Arrays.copyOfRange(parts, 1, parts.length);

        int[] seed = Arrays.stream(seedString.split(":")[1].split("\\s+"))
                .filter(s -> !s.isEmpty())  
                .mapToInt(Integer::parseInt)
                .toArray();

        List<Function> functions = new ArrayList<>();
        for (String functionString : others) {
            functions.add(new Function(functionString));
        }

        List<Integer> P1 = new ArrayList<>();
        for (int x : seed) {
            for (Function f : functions) {
                x = f.applyOne(x);
            }
            P1.add(x);
        }
        System.out.println(min(P1));

        List<Integer> P2 = new ArrayList<>();
        for (int i = 0; i < seed.length; i += 2) {
            int st = seed[i];
            int sz = seed[i + 1];
            List<Range> ranges = new ArrayList<>();
            ranges.add(new Range(st, st + sz));

            for (Function f : functions) {
                ranges = f.applyRange(ranges);
            }

            P2.add(minRange(ranges).start);
        }
        System.out.println(min(P2));
    }

    static int min(List<Integer> list) {
        return list.stream().min(Integer::compareTo).orElseThrow();
    }

    static Range minRange(List<Range> ranges) {
        return ranges.stream().min(Range::compareTo).orElseThrow();
    }

    static class Function {
        List<Tuple> tuples;

        public Function(String S) {
            String[] lines = S.split("\n");
            tuples = new ArrayList<>();
            for (int i = 1; i < lines.length; i++) {
                String[] parts = lines[i].split("\\s+");
                tuples.add(new Tuple(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]), Integer.parseInt(parts[2])));
            }
        }

        int applyOne(int x) {
            for (Tuple tuple : tuples) {
                if (tuple.src <= x && x < tuple.src + tuple.sz) {
                    return x + tuple.dst - tuple.src;
                }
            }
            return x;
        }

        List<Range> applyRange(List<Range> R) {
            List<Range> A = new ArrayList<>();
            List<Range> NR = new ArrayList<>();

            for (Tuple tuple : tuples) {
                int srcEnd = tuple.src + tuple.sz;
                while (!R.isEmpty()) {
                    Range range = R.remove(R.size() - 1);

                    int st = range.start;
                    int ed = range.end;

                    Range before = new Range(st, Math.min(ed, tuple.src));
                    Range inter = new Range(Math.max(st, tuple.src), Math.min(srcEnd, ed));
                    Range after = new Range(Math.max(srcEnd, st), ed);

                    if (before.end > before.start) {
                        NR.add(before);
                    }
                    if (inter.end > inter.start) {
                        A.add(new Range(inter.start - tuple.src + tuple.dst, inter.end - tuple.src + tuple.dst));
                    }
                    if (after.end > after.start) {
                        NR.add(after);
                    }
                }
                R = NR;
            }
            A.addAll(R);
            return A;
        }
    }

    static class Tuple {
        int dst;
        int src;
        int sz;

        public Tuple(int dst, int src, int sz) {
            this.dst = dst;
            this.src = src;
            this.sz = sz;
        }
    }

    static class Range implements Comparable<Range> {
        int start;
        int end;

        public Range(int start, int end) {
            this.start = start;
            this.end = end;
        }

        @Override
        public int compareTo(Range o) {
            return Integer.compare(this.start, o.start);
        }
    }
}
